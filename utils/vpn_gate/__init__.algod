CONCEPT
    CLASS Ipv4 := {{a class representing IPv4 addresses}}
    
    CLASS Ipv6 := {{a class representing IPv6 addresses}}
ENDCONCEPT


CLASS CsvBase :=
    CONST MP_HEADING_ATTR AS Mapping<ُString -> String>,
    updated AS Boolean,

    FUNCTION GetHeadings() -> Set<String> :=
        RETURN DO {{Create a set of all keys of @MP_HEADING_ATTR}}
    ENDFUNCTION

    // Exceptions:
    //  * heading not found: at least one of the headings
    METHOD NEW(
            headings AS Tuple<String...>,
            values AS Tuple<String...>,
            ) :=
        idx AS Integer
        mpHeadingIdx AS Mapping<String -> Integer>
        IF {{Mapping between headings and their indices has calculated before
                and exists in the cache}} THEN
            mpHeadingIdx <- DO {{Read mapping associated with @headings}}
        ELSE
            mpHeadingIdx <- NEW Mapping()
            TRY
                FOR EACH heading IN MP_HEADING_ATTR DO
                    idx <- DO {{Get index of @heading in @headings}}
                    mpHeadingIdx[heading] <- idx
                ENDFOR
            CATCH {{index not ound}} DO
                RAISE {{heading not found: @heading}}
            ENDTRY
            DO {{Associate @mpHeadingIdx with @headings in the cache}}
        ENDIF
        FOR EACH heading, idx IN mpHeadingIdx DO
            DO {{Set @MP_HEADING_ATTR[heading] attribute of @this
                to @values[idx]}}
        ENDFOR
        this.updated <- TRUE
    ENDMETHOD
ENDCLASS


CLASS VpnConfig INHERITS CsvBase :=
    CONST MP_HEADING_ATTR AS Mapping<String -> String> <- DO {{Create a
        mapping corresponding CSV headings and @VpnConfig attribute names.}},
    id AS Integer,
    name AS String,
    countryCode AS String,
    countryName AS String,
    ip AS Ipv4 OR Ipv6,
    logType AS String,
    operatorName AS String,
    operatorMsg AS String,

    METHOD UpdateWith(source AS VpnConfig) :=
        this.id <- source.id
        this.name <- source.name
        this.countryCode <- source.countryCode
        this.countryName <- source.countryName
        this.ip <- source.ip
        this.logType <- source.logType
        this.operatorName <- source.operatorName
        this.operatorMsg <- source.operatorMsg
    ENDMETHOD
ENDCLASS


CLASS OwnerStat INHERITS CsvBase IMPLEMENTS IEquatable :=
    CONST MP_HEADING_ATTR AS Mapping<String -> String> <- DO {{Create a
        mapping corresponding CSV headings and @OwnerStat attribute names.}},
    id AS Integer,
    dtSaved AS DateTime,
    score AS Integer,
    ping AS Integer,
    speed AS Integer,
    nVpnSessions AS Integer,
    uptime AS Integer,
    totalUsers AS Integer,
    totalTraffic AS Integer,

    OPERATOR this = (other AS Object) :=
        IF other IS NOT AN OwnerStat THEN
            RAISE {{unsupported type: expected @OwnerStat but got
                @(TYPE OF other)}}
        ENDIF
        RETURN DO {{Check if all attributes of @this equal their counterparts
            in @other}}
    ENDOPERATOR

    METHOD EqualsButIdTs(other AS OwnerStat) -> Boolean :=
        {{Checks if all attributes of this object are equal to their
        counterparts in @other except for @OwnerStat.id and
        @OwnerStat.dtSaved}}
    ENDMETHOD
ENDCLASS


CLASS UserTest :=
    id AS Integer,
    dtSaved AS DateTime,
    ping AS Integer,
    speed AS Integer,
ENDCLASS


CLASS VpnGateServer :=
    config AS VpnConfig,
    stats AS Mapping<DateTime -> OwnerStat>,
    tests AS Mapping<DateTime -> UserTest>,
    
    FUNCTION GetAllHeadings() -> Set<String> :=
        RETURN VpnConfig.GetHeadings() UNION OwnerStat.GetHeadings()
    ENDFUNCTION

    METHOD NEW(
            config AS VpnConfig,
            stats AS IIterable<OwnerStat> OR NULL <- NULL,
            tests AS IIterable<UserTest> OR NULL <- NULL,
            ) :=
        // Initializing the `config`...
        this.config <- config
        // Initializing the `stats`...
        this.stats <- NEW Mapping() // An empty mapping
        IF stats != NULL THEN
            FOR EACH stat IN stats DO
                this.stats[stat.dtSaved] <- stat
            ENDFOR
        ENDIF
        // Initializing the `tests`...
        this.tests <- NEW Mapping() // An empty mapping
        IF tests != NULL THEN
            FOR EACH test IN tests DO
                this.tests[test.dtSaved] <- test
            ENDFOR
        ENDIF
    ENDMETHOD

    // Gets the timestamp of the most recent `OwnerStat`.
    METHOD GetLastStatDt() -> DateTime :=
        RETURN MAX OF KEYS OF this.stats
    ENDMETHOD

    // Gets the timestamp of the most recent `UserTest`.
    METHOD GetLastTestDt() -> DateTime :=
        RETURN MAX OF KEYS OF this.tests
    ENDMETHOD

    METHOD UpdateWith(server AS VpnGateServer) :=
        // Looking for name conflict...
        IF this.config.name != server.config.name THEN
            RAISE {{name mismatch error: expected @(this.config.name) got 
                @(server.config.name)}}
        ENDIF
        // Looking for ID conflict...
        id AS Integer OR NULL
        IF server.config.id != NULL THEN
            IF this.config.id = NULL THEN
                id <- server.config.id
            ELSE
                RAISE {{conflicting IDs: @(this.config.id) and
                    @(server.config.id)}}
            ENDIF
        ELSE
            id <- this.config.id
        ENDIF
        //
        IF this.GetLastStatDt() > server.GetLastStatDt() THEN
            RAISE {{chronological order error}}
        ENDIF
        this.config.UpdateWith(server.config)
        DO {{Extend @this.stats with @server.stats. Override on collide.}}
    ENDMETHOD

    // Adds a `OwnerStat` to this `VpnGateServer`. If the same statistics
    // already exist just before or after the timestamp, it does nothing.
    // Exceptions:
    // 1. `different metrics at the same timestamp`: the timestamp of `stat`
    //    already exists with different metrics.
    METHOD AddStat(stat AS OwnerStat) :=
        slt AS SoretdList<DateTime> <- NEW SoretdList(KEYS OF this.stats)
        idx AS Integer <- DO {{Find insertion index of @stat.tsSaved into
            @slt before possibly equal values}}
        prevMrgTest AS Boolean <- TRUE
        nextMrgTest AS Boolean <- TRUE
        existTest AS Boolean <- TRUE
        IF {{@idx indicates as the first element}} THEN
            prevMrgTest <- FALSE
        ELSE IF {{@idx indicates after the last element (LAST + 1)}} THEN
            nextMrgTest <- FALSE
            existTest <- FALSE
        ENDIF
        // Checking if the timestamp already exists...
        IF existTest THEN
            IF slt[idx] = stat.tsSaved THEN
                IF NOT stat.EqualsButIdTs(slt[idx]) THEN
                    RAISE {{different metrics at the same timestamp}}
                ENDIF
            ENDIF
        ENDIF
        // Inserting if the stat is an NOT the same as chronologically
        // previous and/or next stats...
        IF NOT ((prevMrgTest AND stat.EqualsButIdTs(slt[idx - 1])) OR (
                nextMrgTest AND stat.EqualsButIdTs(slt[idx]))) THEN
            this.stats[stat.tsSaved] <- stat
        ENDIF
    ENDMETHOD
ENDCLASS


INTERFACE IVpnGateableDb :=
    {{ This interface is supposed to work with a database containing the
    following tables:
        CREATE TABLE IF NOT EXISTS vpn_config (
            config_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(255) NOT NULL UNIQUE,
            ip VARCHAR(45) NOT NULL UNIQUE,
            country_code VARCHAR(10) NOT NULL,
            country_name VARCHAR(255) NOT NULL,
            log_type             VARCHAR(255),
            operator_name        TEXT,
            operator_message     TEXT,
            ovpn_config_base64   TEXT
        );
        CREATE TABLE If NOT EXISTS owner_stat (
            stat_id INTEGER PRIMARY KEY AUTOINCREMENT,
            config_id            INTEGER NOT NULL,
            saved_ts            TIMESTAMP NOT NULL,
            score                BIGINT,
            ping_ms              INTEGER,
            speed_bps            BIGINT,
            num_vpn_sessions     INTEGER,
            uptime_ms            BIGINT,
            total_users          BIGINT,
            total_traffic_bytes  BIGINT,
            UNIQUE (config_id, saved_ts),
            FOREIGN KEY (config_id) REFERENCES vpn_config(config_id)
                ON DELETE CASCADE
        );
        CREATE TABLE If NOT EXISTS user_test (
            test_id INTEGER PRIMARY KEY AUTOINCREMENT,
            config_id            INTEGER NOT NULL,
            saved_ts            TIMESTAMP NOT NULL,
            ping_ms              INTEGER,
            speed_bps            BIGINT,
            UNIQUE (config_id, saved_ts),
            FOREIGN KEY (config_id) REFERENCES vpn_config(config_id)
                ON DELETE CASCADE
        );
    }}
    FUNCTION CreateEmptyDb(path AS FsPath) :=
        {{Creates an empty database with the necessary tables and columns
        at the specified file system path.}}
    ENDFUNCTION
    METHOD connectDb(path AS FsPath) := 
        {{connects to a database file on the file system}}
    ENDMETHOD
    METHOD CheckDb() -> Boolean :=
        {{Checks whether this connected database contains necessary tables
        and columns inside each table.}}
    ENDMETHOD
    METHOD Exists(server_name AS String) -> Boolean :=
        {{Specifies whether a server with the provided name exists in
        the database or not.}}
    ENDMETHOD
    METHOD Select(server_name AS String) -> VpnGateServer OR NULL := 
        {{Returns information associated @server_name name in the database
        as an @VpnGateServer object. Returns @NULL if the name
        doesn't exist.}}
    ENDMETHOD
    METHOD UpsertServer(server AS VpnGateServer) := 
        {{Inserts a new server in the database using the provided object.
        If a server with the same name already exists in the database, it
        updates the configuration of and adds a new stats record to the
        server .}}
    ENDMETHOD
    METHOD Delete(server_name AS String) :=
        {{Deletes all the information associated with the server named
        @server_name. It does nothing, if no such server exists.}}
    ENDMETHOD
    METHOD Close() := {{closes the database connection}} ENDMETHOD
ENDINTERFACE


CLASS VpnGateCsvData :=
    CONST N_COLS AS Integer,
    header AS Tuple<N_COLS TIMES String>,
    data AS List<Tuple<N_COLS TIMES String>>,

    METHOD NEW(n_col AS Integer) :=
        this.N_COLS <- n_col
    ENDMETHOD
ENDCLASS


FUNCTION ParseVpnGateData(text AS String) -> VpnGateCsvData :=
    lines AS Tuple<String...> <- DO {{remove leading and trailing
        whitespace from @text & split it around newline characters}}
    // Identifying star- and hash-started line indices...
    starIndices AS Set<Integer>, hashIndices AS Set<Integer> <- DO {{go
        over the lines and find those starts with `*` or `#` and return
        their indices separately as sets of integers}}
    DO {{remove leading & trailing star-started lines (comments) based on
        @starIndices & update both @starIndices and @hashIndices sets
        accordingly}}
    IF starIndices IS NOT EMPTY THEN
        RAISE {{format error: comments (start-started lines) found in
            the middle}}
    ENDIF
    IF hashIndices != {0} THEN
        RAISE {{format error: unsupported header position: @hashIndices}}
    ENDIF
    // Removing the leading '#' from the header...
    lines[0] = lines[0][1:]  
    // 
    header AS Tuple<String...> <- DO {{parse @lines[0] as CSV}}
    IF NEW Set(header) != VpnGateServer.MP_HEADING_ATTR THEN
        RAISE {{unknown columns}}
    ENDIF
    nCols AS Integer <- LENGTH OF header
    vpnGateData AS VpnGateCsvData <- NEW VpnGateCsvData(nCols)
    vpnGateData.header <- header
    // Parsing the rest of lines...
    nRowCols AS Integer
    record AS Tuple<nCols TIMES String>
    dataRows AS Tuple<Tuple<String...>...> <- DO {{parse @lines[1 .. ]
        as CSV}}
    FOR EACH row IN dataRows DO
        nRowCols <- LENGTH OF row
        diff AS Integer <- nCols - nRowCols
        IF diff < 0 THEN
            RAISE {{format error: inconsistent column numbers}}
        ELSE IF diff > 0 THEN
            record <- dataLine + Tuple(diff TIMES "")
        ELSE
            record <- dataLine
        ENDIF
        DO {{append @record to @vpnGateData.data}}
    ENDFOR
    RETURN vpnGateData
ENDFUNCTION
